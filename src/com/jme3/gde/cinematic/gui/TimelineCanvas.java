/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jme3.gde.cinematic.gui;

import com.jme3.gde.cinematic.core.Layer;
import com.jme3.gde.cinematic.CinematicEditorManager;
import com.jme3.gde.cinematic.core.CinematicClip;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Scrollable;

/**
 *
 * @author MAYANK
 */
public class TimelineCanvas extends JPanel implements Scrollable{
    
    private List<Layer> entireLayerSpace;
    private List<Layer> visibleLayerSpace;
    private CinematicClip cinematicClip;
    /**
     * Creates new form TimelineMap
     */
    public TimelineCanvas(CinematicClip clip) {
        setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
        this.cinematicClip = clip;
        initCanvas();
        entireLayerSpace = new ArrayList<>();
        visibleLayerSpace = new ArrayList<>();
        //initComponents();
    }
    public void initCanvas()
    {
        Layer root = cinematicClip.getRoot();
        List<JPanel> layerSpace = GuiManager.getInstance().getChildrenLayerSpace(root);
        System.out.println("Size : " + layerSpace.size());
        for(JPanel layer: layerSpace)
            add(layer);
    }
    /**
     * Re-renders the TimelineCanvas with the latest layerSpaces
     */
    public void refreshCanvas() {
        List<JPanel> visibleLayerSpaces = GuiManager.getInstance().getVisibleLayerSpaces();
        removeAll();
        setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
        for(JPanel layerSpace:visibleLayerSpaces)
            add(layerSpace);
     }
    /**
     * First compares what new JPanel's/ layerSpaces are to be added to the canvas. Then adds them at their appropriate positions.
     */
    public void compareAndRefresh() {
        List<JPanel> updatedLayerSpaces = GuiManager.getInstance().getVisibleLayerSpaces();
        List<JPanel> oldLayerSpaces = new ArrayList<>();
        for(int i=0;i<getComponentCount();i++)
        {
            JPanel oldLayerSpace = (JPanel)getComponent(i);
            oldLayerSpaces.add(oldLayerSpace);
            if(!updatedLayerSpaces.contains(oldLayerSpace))
                remove(oldLayerSpace);
        }
        for(JPanel temp:updatedLayerSpaces)
            if(!oldLayerSpaces.contains(temp))
            {
                int parentPosition = getComponentPosition((JPanel) temp.getParent());
                add(temp,parentPosition+1);
            }
     }
    /**
     * adds the layer and all the children into a list form.
     * Lazy Loading of all the data
     * @param layer 
     */
    public void populateWithChildren(Layer layer) {
        entireLayerSpace = layer.getDescendants();
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Sets the size of the canvas holding the timeline chart paper.
     * @param width
     * @param height 
     */
    public void setTimelineDimension(int width,int height)
    {
        getBounds().height = height;
        getBounds().width = width;
    }
    
    @Override
    public Dimension getPreferredScrollableViewportSize() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean getScrollableTracksViewportWidth() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean getScrollableTracksViewportHeight() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public static void main(String args[])
    {
        JFrame frame = new JFrame();
        CinematicClip clip = new CinematicClip("MyClip");
        CinematicEditorManager.getInstance().setCurrentClip(clip);
        Layer root = new Layer("MyClip-root",null);
        clip.setRoot(root);
        Layer child = new Layer("Child",root);
        Layer sibling = new Layer("Sibling",root);
        Layer grandChild = new Layer("GrandChild",child);
        TimelineCanvas canvas = new TimelineCanvas(clip);
        frame.add(canvas);
        frame.pack();
        frame.setVisible(true);
        
    }
/**
 * Gets the position of the JPanel in the TimelineCanvas as an integer. Returns -1 if component is not present in the canvas
 * @param panel
 * @return 
 */
    private int getComponentPosition(JPanel panel) {
        for(int i=0;i<getComponentCount();i++)
            if((JPanel)getComponent(i)== panel)
                return i;
        return -1;
    }

    
}
